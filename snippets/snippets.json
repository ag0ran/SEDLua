{
  "assert": {
    "body": "assert(${1:v}${2:[, message]})",
    "description": "assert()\nIssues an error when the value of its argument v is false (i.e., nil or false); otherwise, returns all its arguments. message is an error message; when absent, it defaults to \"assertion failed!\"",
    "prefix": "assert"
  },
  "elif": {
    "body": "else if ${1:condition} then\n\t${0:-- body}\n",
    "description": "elif",
    "prefix": "elif"
  },
  "for": {
    "body": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend",
    "description": "for i=1,10",
    "prefix": "for"
  },
  "fori": {
    "body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend",
    "description": "for i,v in ipairs()",
    "prefix": "fori"
  },
  "forp": {
    "body": "for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend",
    "description": "for k,v in pairs()",
    "prefix": "forp"
  },
  "fun": {
    "body": "function ${1:function_name}(${2:...})\n\t${0:-- body}\nend",
    "description": "function",
    "prefix": "function"
  },
  "if": {
    "body": "if ${1:condition} then\n\t${0:-- body}\nend",
    "description": "if",
    "prefix": "if"
  },
  "ifel": {
    "body": "if ${1:condition} then\n\t${2:-- body}\nelse\n\t${0:-- body}\nend",
    "description": "ifel",
    "prefix": "ifel"
  },
  "ipairs": {
    "body": "ipairs(${0:...})",
    "prefix": "ipairs"
  },
  "local": {
    "body": "local ",
    "description": "local",
    "prefix": "local"
  },
  "pairs": {
    "body": "pairs(${0:...})",
    "description": "5.1,5.2,5.3\n\npairs (t)",
    "prefix": "pairs"
  },
  "print": {
    "body": "print(${1:...})",
    "description": "Receives any number of arguments, and prints their values to stdout, using the tostring function to convert them to strings. print is not intended for formatted output, but only as a quick way to show a value, typically for debugging. For formatted output, use string.format.",
    "prefix": "print"
  },
  "ret": {
    "body": "return",
    "description": "return",
    "prefix": "ret"
  },
  "select": {
    "body": "select(${1:index}, ${2:...})",
    "description": "If index is a number, returns all arguments after argument number index. Otherwise, index must be the string \"#\", and select returns the total number of extra arguments it received.",
    "prefix": "select"
  },
 
  "while": {
    "body": "while ${0:condition} do\n\t${1:--body}\nend",
    "description": "while loop, repeats while the condition evaluates to true.",
    "prefix": "while"
  },
  "do": {
    "body": "do",
    "description": "\"do\" keyword, part of various control statements.",
    "prefix": "do"
  },
  "then": {
    "body": "then",
    "description": "\"then\" keyword, part of various control statements.",
    "prefix": "then"
  },
  "dow": {
    "body": "do\n\t${0:--body}\nwhile ${1:condition}",
    "description": "do-while loop, repeats while the condition evaluates to true but will execute the loop at least once.",
    "prefix": "dow"
  }
}